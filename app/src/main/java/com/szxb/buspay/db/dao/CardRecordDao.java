package com.szxb.buspay.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.buspay.db.entity.card.CardRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CARD_RECORD".
*/
public class CardRecordDao extends AbstractDao<CardRecord, Long> {

    public static final String TABLENAME = "CARD_RECORD";

    /**
     * Properties of entity CardRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "Status", false, "STATUS");
        public final static Property CardType = new Property(2, String.class, "CardType", false, "CARD_TYPE");
        public final static Property PayType = new Property(3, String.class, "PayType", false, "PAY_TYPE");
        public final static Property DeviceNo = new Property(4, String.class, "DeviceNo", false, "DEVICE_NO");
        public final static Property CardNumber = new Property(5, String.class, "CardNumber", false, "CARD_NUMBER");
        public final static Property CardMoney = new Property(6, String.class, "CardMoney", false, "CARD_MONEY");
        public final static Property PayMoney = new Property(7, String.class, "PayMoney", false, "PAY_MONEY");
        public final static Property DateTime = new Property(8, String.class, "DateTime", false, "DATE_TIME");
        public final static Property TrantScationNo = new Property(9, String.class, "TrantScationNo", false, "TRANT_SCATION_NO");
        public final static Property TACNo = new Property(10, String.class, "TACNo", false, "TACNO");
        public final static Property LineNo = new Property(11, String.class, "LineNo", false, "LINE_NO");
        public final static Property BusNo = new Property(12, String.class, "BusNo", false, "BUS_NO");
        public final static Property DriverNo = new Property(13, String.class, "DriverNo", false, "DRIVER_NO");
        public final static Property PSAMNo = new Property(14, String.class, "PSAMNo", false, "PSAMNO");
        public final static Property Exposure = new Property(15, String.class, "exposure", false, "EXPOSURE");
        public final static Property Up_station = new Property(16, String.class, "up_station", false, "UP_STATION");
        public final static Property Ticket = new Property(17, String.class, "ticket", false, "TICKET");
        public final static Property UpLoad = new Property(18, String.class, "UpLoad", false, "UP_LOAD");
        public final static Property Reserve_1 = new Property(19, String.class, "reserve_1", false, "RESERVE_1");
        public final static Property Reserve_2 = new Property(20, String.class, "reserve_2", false, "RESERVE_2");
        public final static Property Reserve_3 = new Property(21, String.class, "reserve_3", false, "RESERVE_3");
    }


    public CardRecordDao(DaoConfig config) {
        super(config);
    }
    
    public CardRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CARD_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" TEXT," + // 1: Status
                "\"CARD_TYPE\" TEXT," + // 2: CardType
                "\"PAY_TYPE\" TEXT," + // 3: PayType
                "\"DEVICE_NO\" TEXT," + // 4: DeviceNo
                "\"CARD_NUMBER\" TEXT," + // 5: CardNumber
                "\"CARD_MONEY\" TEXT," + // 6: CardMoney
                "\"PAY_MONEY\" TEXT," + // 7: PayMoney
                "\"DATE_TIME\" TEXT," + // 8: DateTime
                "\"TRANT_SCATION_NO\" TEXT," + // 9: TrantScationNo
                "\"TACNO\" TEXT," + // 10: TACNo
                "\"LINE_NO\" TEXT," + // 11: LineNo
                "\"BUS_NO\" TEXT," + // 12: BusNo
                "\"DRIVER_NO\" TEXT," + // 13: DriverNo
                "\"PSAMNO\" TEXT," + // 14: PSAMNo
                "\"EXPOSURE\" TEXT," + // 15: exposure
                "\"UP_STATION\" TEXT," + // 16: up_station
                "\"TICKET\" TEXT," + // 17: ticket
                "\"UP_LOAD\" TEXT," + // 18: UpLoad
                "\"RESERVE_1\" TEXT," + // 19: reserve_1
                "\"RESERVE_2\" TEXT," + // 20: reserve_2
                "\"RESERVE_3\" TEXT);"); // 21: reserve_3
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CARD_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(2, Status);
        }
 
        String CardType = entity.getCardType();
        if (CardType != null) {
            stmt.bindString(3, CardType);
        }
 
        String PayType = entity.getPayType();
        if (PayType != null) {
            stmt.bindString(4, PayType);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(5, DeviceNo);
        }
 
        String CardNumber = entity.getCardNumber();
        if (CardNumber != null) {
            stmt.bindString(6, CardNumber);
        }
 
        String CardMoney = entity.getCardMoney();
        if (CardMoney != null) {
            stmt.bindString(7, CardMoney);
        }
 
        String PayMoney = entity.getPayMoney();
        if (PayMoney != null) {
            stmt.bindString(8, PayMoney);
        }
 
        String DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindString(9, DateTime);
        }
 
        String TrantScationNo = entity.getTrantScationNo();
        if (TrantScationNo != null) {
            stmt.bindString(10, TrantScationNo);
        }
 
        String TACNo = entity.getTACNo();
        if (TACNo != null) {
            stmt.bindString(11, TACNo);
        }
 
        String LineNo = entity.getLineNo();
        if (LineNo != null) {
            stmt.bindString(12, LineNo);
        }
 
        String BusNo = entity.getBusNo();
        if (BusNo != null) {
            stmt.bindString(13, BusNo);
        }
 
        String DriverNo = entity.getDriverNo();
        if (DriverNo != null) {
            stmt.bindString(14, DriverNo);
        }
 
        String PSAMNo = entity.getPSAMNo();
        if (PSAMNo != null) {
            stmt.bindString(15, PSAMNo);
        }
 
        String exposure = entity.getExposure();
        if (exposure != null) {
            stmt.bindString(16, exposure);
        }
 
        String up_station = entity.getUp_station();
        if (up_station != null) {
            stmt.bindString(17, up_station);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(18, ticket);
        }
 
        String UpLoad = entity.getUpLoad();
        if (UpLoad != null) {
            stmt.bindString(19, UpLoad);
        }
 
        String reserve_1 = entity.getReserve_1();
        if (reserve_1 != null) {
            stmt.bindString(20, reserve_1);
        }
 
        String reserve_2 = entity.getReserve_2();
        if (reserve_2 != null) {
            stmt.bindString(21, reserve_2);
        }
 
        String reserve_3 = entity.getReserve_3();
        if (reserve_3 != null) {
            stmt.bindString(22, reserve_3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CardRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Status = entity.getStatus();
        if (Status != null) {
            stmt.bindString(2, Status);
        }
 
        String CardType = entity.getCardType();
        if (CardType != null) {
            stmt.bindString(3, CardType);
        }
 
        String PayType = entity.getPayType();
        if (PayType != null) {
            stmt.bindString(4, PayType);
        }
 
        String DeviceNo = entity.getDeviceNo();
        if (DeviceNo != null) {
            stmt.bindString(5, DeviceNo);
        }
 
        String CardNumber = entity.getCardNumber();
        if (CardNumber != null) {
            stmt.bindString(6, CardNumber);
        }
 
        String CardMoney = entity.getCardMoney();
        if (CardMoney != null) {
            stmt.bindString(7, CardMoney);
        }
 
        String PayMoney = entity.getPayMoney();
        if (PayMoney != null) {
            stmt.bindString(8, PayMoney);
        }
 
        String DateTime = entity.getDateTime();
        if (DateTime != null) {
            stmt.bindString(9, DateTime);
        }
 
        String TrantScationNo = entity.getTrantScationNo();
        if (TrantScationNo != null) {
            stmt.bindString(10, TrantScationNo);
        }
 
        String TACNo = entity.getTACNo();
        if (TACNo != null) {
            stmt.bindString(11, TACNo);
        }
 
        String LineNo = entity.getLineNo();
        if (LineNo != null) {
            stmt.bindString(12, LineNo);
        }
 
        String BusNo = entity.getBusNo();
        if (BusNo != null) {
            stmt.bindString(13, BusNo);
        }
 
        String DriverNo = entity.getDriverNo();
        if (DriverNo != null) {
            stmt.bindString(14, DriverNo);
        }
 
        String PSAMNo = entity.getPSAMNo();
        if (PSAMNo != null) {
            stmt.bindString(15, PSAMNo);
        }
 
        String exposure = entity.getExposure();
        if (exposure != null) {
            stmt.bindString(16, exposure);
        }
 
        String up_station = entity.getUp_station();
        if (up_station != null) {
            stmt.bindString(17, up_station);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(18, ticket);
        }
 
        String UpLoad = entity.getUpLoad();
        if (UpLoad != null) {
            stmt.bindString(19, UpLoad);
        }
 
        String reserve_1 = entity.getReserve_1();
        if (reserve_1 != null) {
            stmt.bindString(20, reserve_1);
        }
 
        String reserve_2 = entity.getReserve_2();
        if (reserve_2 != null) {
            stmt.bindString(21, reserve_2);
        }
 
        String reserve_3 = entity.getReserve_3();
        if (reserve_3 != null) {
            stmt.bindString(22, reserve_3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CardRecord readEntity(Cursor cursor, int offset) {
        CardRecord entity = new CardRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // CardType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PayType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DeviceNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CardNumber
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CardMoney
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PayMoney
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TrantScationNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // TACNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // LineNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // BusNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // DriverNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // PSAMNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // exposure
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // up_station
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // ticket
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // UpLoad
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // reserve_1
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // reserve_2
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21) // reserve_3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CardRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPayType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardNumber(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardMoney(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPayMoney(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTrantScationNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTACNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLineNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBusNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDriverNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPSAMNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setExposure(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUp_station(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTicket(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setUpLoad(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setReserve_1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReserve_2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setReserve_3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CardRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CardRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CardRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
