package com.szxb.buspay.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.buspay.db.entity.scan.ScanInfoEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAN_INFO_ENTITY".
*/
public class ScanInfoEntityDao extends AbstractDao<ScanInfoEntity, Long> {

    public static final String TABLENAME = "SCAN_INFO_ENTITY";

    /**
     * Properties of entity ScanInfoEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, Integer.class, "status", false, "STATUS");
        public final static Property Biz_data_single = new Property(2, String.class, "biz_data_single", false, "BIZ_DATA_SINGLE");
        public final static Property Mch_trx_id = new Property(3, String.class, "mch_trx_id", false, "MCH_TRX_ID");
        public final static Property Result = new Property(4, String.class, "result", false, "RESULT");
        public final static Property Tr_status = new Property(5, String.class, "tr_status", false, "TR_STATUS");
        public final static Property Time = new Property(6, String.class, "time", false, "TIME");
        public final static Property Qrcode = new Property(7, String.class, "qrcode", false, "QRCODE");
        public final static Property Openid = new Property(8, String.class, "openid", false, "OPENID");
        public final static Property Pay_fee = new Property(9, Integer.class, "pay_fee", false, "PAY_FEE");
        public final static Property Remark_1 = new Property(10, String.class, "remark_1", false, "REMARK_1");
        public final static Property Remark_2 = new Property(11, String.class, "remark_2", false, "REMARK_2");
        public final static Property Remark_3 = new Property(12, String.class, "remark_3", false, "REMARK_3");
        public final static Property Remark_4 = new Property(13, String.class, "remark_4", false, "REMARK_4");
    }


    public ScanInfoEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScanInfoEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAN_INFO_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" INTEGER," + // 1: status
                "\"BIZ_DATA_SINGLE\" TEXT," + // 2: biz_data_single
                "\"MCH_TRX_ID\" TEXT," + // 3: mch_trx_id
                "\"RESULT\" TEXT," + // 4: result
                "\"TR_STATUS\" TEXT," + // 5: tr_status
                "\"TIME\" TEXT," + // 6: time
                "\"QRCODE\" TEXT," + // 7: qrcode
                "\"OPENID\" TEXT," + // 8: openid
                "\"PAY_FEE\" INTEGER," + // 9: pay_fee
                "\"REMARK_1\" TEXT," + // 10: remark_1
                "\"REMARK_2\" TEXT," + // 11: remark_2
                "\"REMARK_3\" TEXT," + // 12: remark_3
                "\"REMARK_4\" TEXT);"); // 13: remark_4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAN_INFO_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScanInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }
 
        String biz_data_single = entity.getBiz_data_single();
        if (biz_data_single != null) {
            stmt.bindString(3, biz_data_single);
        }
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(4, mch_trx_id);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(5, result);
        }
 
        String tr_status = entity.getTr_status();
        if (tr_status != null) {
            stmt.bindString(6, tr_status);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(8, qrcode);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(9, openid);
        }
 
        Integer pay_fee = entity.getPay_fee();
        if (pay_fee != null) {
            stmt.bindLong(10, pay_fee);
        }
 
        String remark_1 = entity.getRemark_1();
        if (remark_1 != null) {
            stmt.bindString(11, remark_1);
        }
 
        String remark_2 = entity.getRemark_2();
        if (remark_2 != null) {
            stmt.bindString(12, remark_2);
        }
 
        String remark_3 = entity.getRemark_3();
        if (remark_3 != null) {
            stmt.bindString(13, remark_3);
        }
 
        String remark_4 = entity.getRemark_4();
        if (remark_4 != null) {
            stmt.bindString(14, remark_4);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScanInfoEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(2, status);
        }
 
        String biz_data_single = entity.getBiz_data_single();
        if (biz_data_single != null) {
            stmt.bindString(3, biz_data_single);
        }
 
        String mch_trx_id = entity.getMch_trx_id();
        if (mch_trx_id != null) {
            stmt.bindString(4, mch_trx_id);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(5, result);
        }
 
        String tr_status = entity.getTr_status();
        if (tr_status != null) {
            stmt.bindString(6, tr_status);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(7, time);
        }
 
        String qrcode = entity.getQrcode();
        if (qrcode != null) {
            stmt.bindString(8, qrcode);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(9, openid);
        }
 
        Integer pay_fee = entity.getPay_fee();
        if (pay_fee != null) {
            stmt.bindLong(10, pay_fee);
        }
 
        String remark_1 = entity.getRemark_1();
        if (remark_1 != null) {
            stmt.bindString(11, remark_1);
        }
 
        String remark_2 = entity.getRemark_2();
        if (remark_2 != null) {
            stmt.bindString(12, remark_2);
        }
 
        String remark_3 = entity.getRemark_3();
        if (remark_3 != null) {
            stmt.bindString(13, remark_3);
        }
 
        String remark_4 = entity.getRemark_4();
        if (remark_4 != null) {
            stmt.bindString(14, remark_4);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScanInfoEntity readEntity(Cursor cursor, int offset) {
        ScanInfoEntity entity = new ScanInfoEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // biz_data_single
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mch_trx_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // result
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tr_status
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // qrcode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // openid
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // pay_fee
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // remark_1
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // remark_2
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark_3
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // remark_4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScanInfoEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBiz_data_single(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMch_trx_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResult(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTr_status(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setQrcode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOpenid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPay_fee(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setRemark_1(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRemark_2(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark_3(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemark_4(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScanInfoEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScanInfoEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScanInfoEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
