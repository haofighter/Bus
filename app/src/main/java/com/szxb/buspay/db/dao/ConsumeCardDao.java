package com.szxb.buspay.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.szxb.buspay.db.entity.bean.card.ConsumeCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONSUME_CARD".
*/
public class ConsumeCardDao extends AbstractDao<ConsumeCard, Long> {

    public static final String TABLENAME = "CONSUME_CARD";

    /**
     * Properties of entity ConsumeCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, String.class, "status", false, "STATUS");
        public final static Property CardType = new Property(2, String.class, "cardType", false, "CARD_TYPE");
        public final static Property TransType = new Property(3, String.class, "transType", false, "TRANS_TYPE");
        public final static Property TransNo = new Property(4, String.class, "transNo", false, "TRANS_NO");
        public final static Property CardNo = new Property(5, String.class, "cardNo", false, "CARD_NO");
        public final static Property CardBalance = new Property(6, String.class, "cardBalance", false, "CARD_BALANCE");
        public final static Property PayFee = new Property(7, String.class, "payFee", false, "PAY_FEE");
        public final static Property TransTime = new Property(8, String.class, "transTime", false, "TRANS_TIME");
        public final static Property TransNo2 = new Property(9, String.class, "transNo2", false, "TRANS_NO2");
        public final static Property Tac = new Property(10, String.class, "tac", false, "TAC");
        public final static Property LineNo = new Property(11, String.class, "lineNo", false, "LINE_NO");
        public final static Property BusNo = new Property(12, String.class, "busNo", false, "BUS_NO");
        public final static Property DriverNo = new Property(13, String.class, "driverNo", false, "DRIVER_NO");
        public final static Property PasmNo = new Property(14, String.class, "pasmNo", false, "PASM_NO");
        public final static Property Direction = new Property(15, String.class, "direction", false, "DIRECTION");
        public final static Property StationId = new Property(16, String.class, "stationId", false, "STATION_ID");
        public final static Property FareFlag = new Property(17, String.class, "fareFlag", false, "FARE_FLAG");
        public final static Property AlgFlag = new Property(18, String.class, "algFlag", false, "ALG_FLAG");
        public final static Property IssuerFlag = new Property(19, String.class, "issuerFlag", false, "ISSUER_FLAG");
        public final static Property CardChildType = new Property(20, String.class, "cardChildType", false, "CARD_CHILD_TYPE");
        public final static Property CpuVersion = new Property(21, String.class, "cpuVersion", false, "CPU_VERSION");
        public final static Property UniqueFlag = new Property(22, String.class, "uniqueFlag", false, "UNIQUE_FLAG");
        public final static Property UpStatus = new Property(23, Integer.class, "upStatus", false, "UP_STATUS");
        public final static Property SingleRecord = new Property(24, String.class, "singleRecord", false, "SINGLE_RECORD");
        public final static Property Reserve_1 = new Property(25, String.class, "reserve_1", false, "RESERVE_1");
        public final static Property Reserve_2 = new Property(26, String.class, "reserve_2", false, "RESERVE_2");
        public final static Property Reserve_3 = new Property(27, String.class, "reserve_3", false, "RESERVE_3");
    }


    public ConsumeCardDao(DaoConfig config) {
        super(config);
    }
    
    public ConsumeCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONSUME_CARD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" TEXT," + // 1: status
                "\"CARD_TYPE\" TEXT," + // 2: cardType
                "\"TRANS_TYPE\" TEXT," + // 3: transType
                "\"TRANS_NO\" TEXT," + // 4: transNo
                "\"CARD_NO\" TEXT," + // 5: cardNo
                "\"CARD_BALANCE\" TEXT," + // 6: cardBalance
                "\"PAY_FEE\" TEXT," + // 7: payFee
                "\"TRANS_TIME\" TEXT," + // 8: transTime
                "\"TRANS_NO2\" TEXT," + // 9: transNo2
                "\"TAC\" TEXT," + // 10: tac
                "\"LINE_NO\" TEXT," + // 11: lineNo
                "\"BUS_NO\" TEXT," + // 12: busNo
                "\"DRIVER_NO\" TEXT," + // 13: driverNo
                "\"PASM_NO\" TEXT," + // 14: pasmNo
                "\"DIRECTION\" TEXT," + // 15: direction
                "\"STATION_ID\" TEXT," + // 16: stationId
                "\"FARE_FLAG\" TEXT," + // 17: fareFlag
                "\"ALG_FLAG\" TEXT," + // 18: algFlag
                "\"ISSUER_FLAG\" TEXT," + // 19: issuerFlag
                "\"CARD_CHILD_TYPE\" TEXT," + // 20: cardChildType
                "\"CPU_VERSION\" TEXT," + // 21: cpuVersion
                "\"UNIQUE_FLAG\" TEXT UNIQUE ," + // 22: uniqueFlag
                "\"UP_STATUS\" INTEGER," + // 23: upStatus
                "\"SINGLE_RECORD\" TEXT," + // 24: singleRecord
                "\"RESERVE_1\" TEXT," + // 25: reserve_1
                "\"RESERVE_2\" TEXT," + // 26: reserve_2
                "\"RESERVE_3\" TEXT);"); // 27: reserve_3
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_CONSUME_CARD_CARD_NO ON CONSUME_CARD" +
                " (\"CARD_NO\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONSUME_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConsumeCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(3, cardType);
        }
 
        String transType = entity.getTransType();
        if (transType != null) {
            stmt.bindString(4, transType);
        }
 
        String transNo = entity.getTransNo();
        if (transNo != null) {
            stmt.bindString(5, transNo);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String cardBalance = entity.getCardBalance();
        if (cardBalance != null) {
            stmt.bindString(7, cardBalance);
        }
 
        String payFee = entity.getPayFee();
        if (payFee != null) {
            stmt.bindString(8, payFee);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(9, transTime);
        }
 
        String transNo2 = entity.getTransNo2();
        if (transNo2 != null) {
            stmt.bindString(10, transNo2);
        }
 
        String tac = entity.getTac();
        if (tac != null) {
            stmt.bindString(11, tac);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(12, lineNo);
        }
 
        String busNo = entity.getBusNo();
        if (busNo != null) {
            stmt.bindString(13, busNo);
        }
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(14, driverNo);
        }
 
        String pasmNo = entity.getPasmNo();
        if (pasmNo != null) {
            stmt.bindString(15, pasmNo);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(16, direction);
        }
 
        String stationId = entity.getStationId();
        if (stationId != null) {
            stmt.bindString(17, stationId);
        }
 
        String fareFlag = entity.getFareFlag();
        if (fareFlag != null) {
            stmt.bindString(18, fareFlag);
        }
 
        String algFlag = entity.getAlgFlag();
        if (algFlag != null) {
            stmt.bindString(19, algFlag);
        }
 
        String issuerFlag = entity.getIssuerFlag();
        if (issuerFlag != null) {
            stmt.bindString(20, issuerFlag);
        }
 
        String cardChildType = entity.getCardChildType();
        if (cardChildType != null) {
            stmt.bindString(21, cardChildType);
        }
 
        String cpuVersion = entity.getCpuVersion();
        if (cpuVersion != null) {
            stmt.bindString(22, cpuVersion);
        }
 
        String uniqueFlag = entity.getUniqueFlag();
        if (uniqueFlag != null) {
            stmt.bindString(23, uniqueFlag);
        }
 
        Integer upStatus = entity.getUpStatus();
        if (upStatus != null) {
            stmt.bindLong(24, upStatus);
        }
 
        String singleRecord = entity.getSingleRecord();
        if (singleRecord != null) {
            stmt.bindString(25, singleRecord);
        }
 
        String reserve_1 = entity.getReserve_1();
        if (reserve_1 != null) {
            stmt.bindString(26, reserve_1);
        }
 
        String reserve_2 = entity.getReserve_2();
        if (reserve_2 != null) {
            stmt.bindString(27, reserve_2);
        }
 
        String reserve_3 = entity.getReserve_3();
        if (reserve_3 != null) {
            stmt.bindString(28, reserve_3);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConsumeCard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(2, status);
        }
 
        String cardType = entity.getCardType();
        if (cardType != null) {
            stmt.bindString(3, cardType);
        }
 
        String transType = entity.getTransType();
        if (transType != null) {
            stmt.bindString(4, transType);
        }
 
        String transNo = entity.getTransNo();
        if (transNo != null) {
            stmt.bindString(5, transNo);
        }
 
        String cardNo = entity.getCardNo();
        if (cardNo != null) {
            stmt.bindString(6, cardNo);
        }
 
        String cardBalance = entity.getCardBalance();
        if (cardBalance != null) {
            stmt.bindString(7, cardBalance);
        }
 
        String payFee = entity.getPayFee();
        if (payFee != null) {
            stmt.bindString(8, payFee);
        }
 
        String transTime = entity.getTransTime();
        if (transTime != null) {
            stmt.bindString(9, transTime);
        }
 
        String transNo2 = entity.getTransNo2();
        if (transNo2 != null) {
            stmt.bindString(10, transNo2);
        }
 
        String tac = entity.getTac();
        if (tac != null) {
            stmt.bindString(11, tac);
        }
 
        String lineNo = entity.getLineNo();
        if (lineNo != null) {
            stmt.bindString(12, lineNo);
        }
 
        String busNo = entity.getBusNo();
        if (busNo != null) {
            stmt.bindString(13, busNo);
        }
 
        String driverNo = entity.getDriverNo();
        if (driverNo != null) {
            stmt.bindString(14, driverNo);
        }
 
        String pasmNo = entity.getPasmNo();
        if (pasmNo != null) {
            stmt.bindString(15, pasmNo);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(16, direction);
        }
 
        String stationId = entity.getStationId();
        if (stationId != null) {
            stmt.bindString(17, stationId);
        }
 
        String fareFlag = entity.getFareFlag();
        if (fareFlag != null) {
            stmt.bindString(18, fareFlag);
        }
 
        String algFlag = entity.getAlgFlag();
        if (algFlag != null) {
            stmt.bindString(19, algFlag);
        }
 
        String issuerFlag = entity.getIssuerFlag();
        if (issuerFlag != null) {
            stmt.bindString(20, issuerFlag);
        }
 
        String cardChildType = entity.getCardChildType();
        if (cardChildType != null) {
            stmt.bindString(21, cardChildType);
        }
 
        String cpuVersion = entity.getCpuVersion();
        if (cpuVersion != null) {
            stmt.bindString(22, cpuVersion);
        }
 
        String uniqueFlag = entity.getUniqueFlag();
        if (uniqueFlag != null) {
            stmt.bindString(23, uniqueFlag);
        }
 
        Integer upStatus = entity.getUpStatus();
        if (upStatus != null) {
            stmt.bindLong(24, upStatus);
        }
 
        String singleRecord = entity.getSingleRecord();
        if (singleRecord != null) {
            stmt.bindString(25, singleRecord);
        }
 
        String reserve_1 = entity.getReserve_1();
        if (reserve_1 != null) {
            stmt.bindString(26, reserve_1);
        }
 
        String reserve_2 = entity.getReserve_2();
        if (reserve_2 != null) {
            stmt.bindString(27, reserve_2);
        }
 
        String reserve_3 = entity.getReserve_3();
        if (reserve_3 != null) {
            stmt.bindString(28, reserve_3);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConsumeCard readEntity(Cursor cursor, int offset) {
        ConsumeCard entity = new ConsumeCard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cardType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // transType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // transNo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cardNo
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cardBalance
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // payFee
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // transTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // transNo2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tac
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // lineNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // busNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // driverNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pasmNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // direction
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // stationId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // fareFlag
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // algFlag
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // issuerFlag
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // cardChildType
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // cpuVersion
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // uniqueFlag
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // upStatus
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // singleRecord
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // reserve_1
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // reserve_2
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // reserve_3
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConsumeCard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTransType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTransNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCardNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCardBalance(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPayFee(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTransTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTransNo2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTac(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLineNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBusNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDriverNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPasmNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDirection(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStationId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFareFlag(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setAlgFlag(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIssuerFlag(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setCardChildType(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCpuVersion(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUniqueFlag(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setUpStatus(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setSingleRecord(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setReserve_1(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setReserve_2(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setReserve_3(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConsumeCard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConsumeCard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConsumeCard entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
